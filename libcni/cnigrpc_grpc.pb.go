// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package libcni

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// CNIserverClient is the client API for CNIserver service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CNIserverClient interface {
	// Process CNI message
	CNIconfig(ctx context.Context, in *ConfPath, opts ...grpc.CallOption) (*CNIerror, error)
	CNIadd(ctx context.Context, in *CNIaddMsg, opts ...grpc.CallOption) (*ADDresult, error)
	CNIcheck(ctx context.Context, in *CNIcheckMsg, opts ...grpc.CallOption) (*CHECKresult, error)
	CNIdel(ctx context.Context, in *CNIdelMsg, opts ...grpc.CallOption) (*DELresult, error)
}

type cNIserverClient struct {
	cc grpc.ClientConnInterface
}

func NewCNIserverClient(cc grpc.ClientConnInterface) CNIserverClient {
	return &cNIserverClient{cc}
}

func (c *cNIserverClient) CNIconfig(ctx context.Context, in *ConfPath, opts ...grpc.CallOption) (*CNIerror, error) {
	out := new(CNIerror)
	err := c.cc.Invoke(ctx, "/libcni.CNIserver/CNIconfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cNIserverClient) CNIadd(ctx context.Context, in *CNIaddMsg, opts ...grpc.CallOption) (*ADDresult, error) {
	out := new(ADDresult)
	err := c.cc.Invoke(ctx, "/libcni.CNIserver/CNIadd", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cNIserverClient) CNIcheck(ctx context.Context, in *CNIcheckMsg, opts ...grpc.CallOption) (*CHECKresult, error) {
	out := new(CHECKresult)
	err := c.cc.Invoke(ctx, "/libcni.CNIserver/CNIcheck", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cNIserverClient) CNIdel(ctx context.Context, in *CNIdelMsg, opts ...grpc.CallOption) (*DELresult, error) {
	out := new(DELresult)
	err := c.cc.Invoke(ctx, "/libcni.CNIserver/CNIdel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CNIserverServer is the server API for CNIserver service.
// All implementations must embed UnimplementedCNIserverServer
// for forward compatibility
type CNIserverServer interface {
	// Process CNI message
	CNIconfig(context.Context, *ConfPath) (*CNIerror, error)
	CNIadd(context.Context, *CNIaddMsg) (*ADDresult, error)
	CNIcheck(context.Context, *CNIcheckMsg) (*CHECKresult, error)
	CNIdel(context.Context, *CNIdelMsg) (*DELresult, error)
	mustEmbedUnimplementedCNIserverServer()
}

// UnimplementedCNIserverServer must be embedded to have forward compatible implementations.
type UnimplementedCNIserverServer struct {
}

func (UnimplementedCNIserverServer) CNIconfig(context.Context, *ConfPath) (*CNIerror, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CNIconfig not implemented")
}
func (UnimplementedCNIserverServer) CNIadd(context.Context, *CNIaddMsg) (*ADDresult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CNIadd not implemented")
}
func (UnimplementedCNIserverServer) CNIcheck(context.Context, *CNIcheckMsg) (*CHECKresult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CNIcheck not implemented")
}
func (UnimplementedCNIserverServer) CNIdel(context.Context, *CNIdelMsg) (*DELresult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CNIdel not implemented")
}
func (UnimplementedCNIserverServer) mustEmbedUnimplementedCNIserverServer() {}

// UnsafeCNIserverServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CNIserverServer will
// result in compilation errors.
type UnsafeCNIserverServer interface {
	mustEmbedUnimplementedCNIserverServer()
}

func RegisterCNIserverServer(s grpc.ServiceRegistrar, srv CNIserverServer) {
	s.RegisterService(&CNIserver_ServiceDesc, srv)
}

func _CNIserver_CNIconfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConfPath)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CNIserverServer).CNIconfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/libcni.CNIserver/CNIconfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CNIserverServer).CNIconfig(ctx, req.(*ConfPath))
	}
	return interceptor(ctx, in, info, handler)
}

func _CNIserver_CNIadd_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CNIaddMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CNIserverServer).CNIadd(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/libcni.CNIserver/CNIadd",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CNIserverServer).CNIadd(ctx, req.(*CNIaddMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _CNIserver_CNIcheck_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CNIcheckMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CNIserverServer).CNIcheck(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/libcni.CNIserver/CNIcheck",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CNIserverServer).CNIcheck(ctx, req.(*CNIcheckMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _CNIserver_CNIdel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CNIdelMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CNIserverServer).CNIdel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/libcni.CNIserver/CNIdel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CNIserverServer).CNIdel(ctx, req.(*CNIdelMsg))
	}
	return interceptor(ctx, in, info, handler)
}

// CNIserver_ServiceDesc is the grpc.ServiceDesc for CNIserver service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CNIserver_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "libcni.CNIserver",
	HandlerType: (*CNIserverServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CNIconfig",
			Handler:    _CNIserver_CNIconfig_Handler,
		},
		{
			MethodName: "CNIadd",
			Handler:    _CNIserver_CNIadd_Handler,
		},
		{
			MethodName: "CNIcheck",
			Handler:    _CNIserver_CNIcheck_Handler,
		},
		{
			MethodName: "CNIdel",
			Handler:    _CNIserver_CNIdel_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "cnigrpc.proto",
}
